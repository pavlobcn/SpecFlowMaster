'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by SpecFlow (http://www.specflow.org/).
'     SpecFlow Version:3.0.0.0
'     SpecFlow Generator Version:3.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------
#Region "Designer generated code"
'#pragma warning disable
Imports TechTalk.SpecFlow

Namespace Global.PB.SpecFlowMaster.Examples.VB
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0"),  _
     System.Runtime.CompilerServices.CompilerGeneratedAttribute(),  _
     NUnit.Framework.TestFixtureAttribute(),  _
     NUnit.Framework.DescriptionAttribute("SpecFlowScenarioOutline")>  _
    Partial Public Class SpecFlowScenarioOutlineFeature
        
        Private testRunner As TechTalk.SpecFlow.ITestRunner
        
#ExternalSource("SpecFlowScenarioOutline.feature",1)
#End ExternalSource
        
        <NUnit.Framework.OneTimeSetUpAttribute()>  _
        Public Overridable Sub FeatureSetup()
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner
            Dim featureInfo As TechTalk.SpecFlow.FeatureInfo = New TechTalk.SpecFlow.FeatureInfo(New System.Globalization.CultureInfo("en-US"), "SpecFlowScenarioOutline", ""&Global.Microsoft.VisualBasic.ChrW(9)&"Test to check which steps in scenario outline execution are really needed for go"& _ 
                    "od tests", ProgrammingLanguage.VB, CType(Nothing,String()))
            testRunner.OnFeatureStart(featureInfo)
        End Sub
        
        <NUnit.Framework.OneTimeTearDownAttribute()>  _
        Public Overridable Sub FeatureTearDown()
            testRunner.OnFeatureEnd
            testRunner = Nothing
        End Sub
        
        <NUnit.Framework.SetUpAttribute()>  _
        Public Overridable Sub TestInitialize()
        End Sub
        
        <NUnit.Framework.TearDownAttribute()>  _
        Public Overridable Sub ScenarioTearDown()
            testRunner.OnScenarioEnd
        End Sub
        
        Public Overridable Sub ScenarioInitialize(ByVal scenarioInfo As TechTalk.SpecFlow.ScenarioInfo)
            testRunner.OnScenarioInitialize(scenarioInfo)
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs(Of NUnit.Framework.TestContext)(NUnit.Framework.TestContext.CurrentContext)
        End Sub
        
        Public Overridable Sub ScenarioStart()
            testRunner.OnScenarioStart
        End Sub
        
        Public Overridable Sub ScenarioCleanup()
            testRunner.CollectScenarioErrors
        End Sub
        
        <NUnit.Framework.TestAttribute(),  _
         NUnit.Framework.DescriptionAttribute("Test without unnecessary steps"),  _
         NUnit.Framework.TestCaseAttribute("10", "20", Nothing),  _
         NUnit.Framework.TestCaseAttribute("20", "30", Nothing)>  _
        Public Overridable Sub TestWithoutUnnecessarySteps(ByVal param1 As String, ByVal param2 As String, ByVal exampleTags() As String)
            Dim scenarioInfo As TechTalk.SpecFlow.ScenarioInfo = New TechTalk.SpecFlow.ScenarioInfo("Test without unnecessary steps", Nothing, exampleTags)
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",4)
Me.ScenarioInitialize(scenarioInfo)
            Me.ScenarioStart
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",5)
 testRunner.Given(String.Format("step with parameter {0}", param1), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Given ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",6)
 testRunner.When(String.Format("execute with parameter {0}", param2), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "When ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",7)
 testRunner.Then(String.Format("executed Given step with parameter {0}", param1), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",8)
 testRunner.And(String.Format("executed When step with parameter {0}", param2), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
            Me.ScenarioCleanup
        End Sub
        
        <NUnit.Framework.TestAttribute(),  _
         NUnit.Framework.DescriptionAttribute("Test with unnecessary steps"),  _
         NUnit.Framework.TestCaseAttribute("10", "20", Nothing),  _
         NUnit.Framework.TestCaseAttribute("20", "30", Nothing)>  _
        Public Overridable Sub TestWithUnnecessarySteps(ByVal param1 As String, ByVal param2 As String, ByVal exampleTags() As String)
            Dim scenarioInfo As TechTalk.SpecFlow.ScenarioInfo = New TechTalk.SpecFlow.ScenarioInfo("Test with unnecessary steps", Nothing, exampleTags)
#ExternalSource("SpecFlowScenarioOutline.feature",14)
Me.ScenarioInitialize(scenarioInfo)
            Me.ScenarioStart
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",16)
 testRunner.Given(String.Format("step with parameter {0}", param1), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Given ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",17)
 testRunner.When(String.Format("execute with parameter {0}", param2), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "When ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",18)
 testRunner.Then(String.Format("executed When step with parameter {0}", param2), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
#End ExternalSource
            Me.ScenarioCleanup
        End Sub
        
        <NUnit.Framework.TestAttribute(),  _
         NUnit.Framework.DescriptionAttribute("Test with unnecessary steps and table as a parameter"),  _
         NUnit.Framework.TestCaseAttribute("10", "20", Nothing),  _
         NUnit.Framework.TestCaseAttribute("20", "30", Nothing)>  _
        Public Overridable Sub TestWithUnnecessaryStepsAndTableAsAParameter(ByVal param1 As String, ByVal param2 As String, ByVal exampleTags() As String)
            Dim scenarioInfo As TechTalk.SpecFlow.ScenarioInfo = New TechTalk.SpecFlow.ScenarioInfo("Test with unnecessary steps and table as a parameter", Nothing, exampleTags)
#ExternalSource("SpecFlowScenarioOutline.feature",24)
Me.ScenarioInitialize(scenarioInfo)
            Me.ScenarioStart
#End ExternalSource
            Dim table1 As TechTalk.SpecFlow.Table = New TechTalk.SpecFlow.Table(New String() {"ParamValue"})
            table1.AddRow(New String() {String.Format("{0}", param1)})
#ExternalSource("SpecFlowScenarioOutline.feature",26)
 testRunner.Given("step with parameters", CType(Nothing,String), table1, "Given ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",29)
 testRunner.When(String.Format("execute with parameter {0}", param2), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "When ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",30)
 testRunner.Then(String.Format("executed When step with parameter {0}", param2), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
#End ExternalSource
            Me.ScenarioCleanup
        End Sub
    End Class
    
    <NUnit.Framework.TestFixtureAttribute(),  _
     NUnit.Framework.DescriptionAttribute("SpecFlowScenarioOutline")>  _
    Partial Public Class SpecFlowScenarioOutlineFeatureMaster
        
        Private testRunner As TechTalk.SpecFlow.ITestRunner
        
#ExternalSource("SpecFlowScenarioOutline.feature",1)
#End ExternalSource
        
        <NUnit.Framework.OneTimeSetUpAttribute()>  _
        Public Overridable Sub FeatureSetup()
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(Nothing, 0)
            Dim featureInfo As TechTalk.SpecFlow.FeatureInfo = New TechTalk.SpecFlow.FeatureInfo(New System.Globalization.CultureInfo("en-US"), "SpecFlowScenarioOutline", ""&Global.Microsoft.VisualBasic.ChrW(9)&"Test to check which steps in scenario outline execution are really needed for go"& _ 
                    "od tests", ProgrammingLanguage.VB, Nothing)
            testRunner.OnFeatureStart(featureInfo)
        End Sub
        
        <NUnit.Framework.OneTimeTearDownAttribute()>  _
        Public Overridable Sub FeatureTearDown()
            testRunner.OnFeatureEnd
            testRunner = Nothing
        End Sub
        
        <NUnit.Framework.SetUpAttribute()>  _
        Public Overridable Sub TestInitialize()
        End Sub
        
        <NUnit.Framework.TearDownAttribute()>  _
        Public Overridable Sub ScenarioTearDown()
            testRunner.OnScenarioEnd
        End Sub
        
        Public Overridable Sub ScenarioInitialize(ByVal scenarioInfo As TechTalk.SpecFlow.ScenarioInfo)
            testRunner.OnScenarioInitialize(scenarioInfo)
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs(Of NUnit.Framework.TestContext)(NUnit.Framework.TestContext.CurrentContext)
        End Sub
        
        Public Overridable Sub ScenarioStart()
            testRunner.OnScenarioStart
        End Sub
        
        Public Overridable Sub ScenarioCleanup()
            testRunner.CollectScenarioErrors
        End Sub
        
        Private Sub FeatureBackground()
        End Sub
        
        Public Overridable Sub Test(ByVal steps As System.Action, ByVal lineNumber As Integer)
            Dim noExceptionOccured As Boolean = true
            Try 
                Dim scenarioInfo As TechTalk.SpecFlow.ScenarioInfo = New TechTalk.SpecFlow.ScenarioInfo("SpecFlowScenarioOutline", Nothing)
                testRunner.OnScenarioInitialize(scenarioInfo)
                Me.ScenarioStart
                Dim testExecutionContext As NUnit.Framework.Internal.TestExecutionContext.IsolatedContext = New NUnit.Framework.Internal.TestExecutionContext.IsolatedContext()
                Try 
                    steps
                Finally
                    testExecutionContext.Dispose
                End Try
                Me.ScenarioCleanup
            Catch __exception As System.Exception
                noExceptionOccured = false
            End Try
            If noExceptionOccured Then
                Throw New System.Exception(String.Format("Line {0} is suspicious.", lineNumber))
            End If
        End Sub
        
        <NUnit.Framework.TestAttribute(),  _
         NUnit.Framework.DescriptionAttribute("TestLine05StepWithParameterParam1")>  _
        Public Overridable Sub TestLine05StepWithParameterParam1()
            Me.Test(AddressOf Me.TestLine05StepWithParameterParam1Steps, 5)
        End Sub
        
        Private Sub TestLine05StepWithParameterParam1Steps()
#ExternalSource("SpecFlowScenarioOutline.feature",6)
 testRunner.When(String.Format("execute with parameter {0}", "20"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "When ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",7)
 testRunner.Then(String.Format("executed Given step with parameter {0}", "10"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",8)
 testRunner.And(String.Format("executed When step with parameter {0}", "20"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",6)
 testRunner.When(String.Format("execute with parameter {0}", "30"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "When ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",7)
 testRunner.Then(String.Format("executed Given step with parameter {0}", "20"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",8)
 testRunner.And(String.Format("executed When step with parameter {0}", "30"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
        End Sub
        
        <NUnit.Framework.TestAttribute(),  _
         NUnit.Framework.DescriptionAttribute("TestLine06ExecuteWithParameterParam2")>  _
        Public Overridable Sub TestLine06ExecuteWithParameterParam2()
            Me.Test(AddressOf Me.TestLine06ExecuteWithParameterParam2Steps, 6)
        End Sub
        
        Private Sub TestLine06ExecuteWithParameterParam2Steps()
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",5)
 testRunner.Given(String.Format("step with parameter {0}", "10"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Given ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",7)
 testRunner.Then(String.Format("executed Given step with parameter {0}", "10"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",8)
 testRunner.And(String.Format("executed When step with parameter {0}", "20"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",5)
 testRunner.Given(String.Format("step with parameter {0}", "20"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Given ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",7)
 testRunner.Then(String.Format("executed Given step with parameter {0}", "20"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",8)
 testRunner.And(String.Format("executed When step with parameter {0}", "30"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
        End Sub
        
        <NUnit.Framework.TestAttribute(),  _
         NUnit.Framework.DescriptionAttribute("TestLine16StepWithParameterParam1")>  _
        Public Overridable Sub TestLine16StepWithParameterParam1()
            Me.Test(AddressOf Me.TestLine16StepWithParameterParam1Steps, 16)
        End Sub
        
        Private Sub TestLine16StepWithParameterParam1Steps()
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",17)
 testRunner.When(String.Format("execute with parameter {0}", "20"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "When ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",18)
 testRunner.Then(String.Format("executed When step with parameter {0}", "20"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",17)
 testRunner.When(String.Format("execute with parameter {0}", "30"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "When ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",18)
 testRunner.Then(String.Format("executed When step with parameter {0}", "30"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
        End Sub
        
        <NUnit.Framework.TestAttribute(),  _
         NUnit.Framework.DescriptionAttribute("TestLine17ExecuteWithParameterParam2")>  _
        Public Overridable Sub TestLine17ExecuteWithParameterParam2()
            Me.Test(AddressOf Me.TestLine17ExecuteWithParameterParam2Steps, 17)
        End Sub
        
        Private Sub TestLine17ExecuteWithParameterParam2Steps()
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",16)
 testRunner.Given(String.Format("step with parameter {0}", "10"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Given ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",18)
 testRunner.Then(String.Format("executed When step with parameter {0}", "20"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",16)
 testRunner.Given(String.Format("step with parameter {0}", "20"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Given ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",18)
 testRunner.Then(String.Format("executed When step with parameter {0}", "30"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
        End Sub
        
        <NUnit.Framework.TestAttribute(),  _
         NUnit.Framework.DescriptionAttribute("TestLine26StepWithParameters")>  _
        Public Overridable Sub TestLine26StepWithParameters()
            Me.Test(AddressOf Me.TestLine26StepWithParametersSteps, 26)
        End Sub
        
        Private Sub TestLine26StepWithParametersSteps()
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",29)
 testRunner.When(String.Format("execute with parameter {0}", "20"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "When ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",30)
 testRunner.Then(String.Format("executed When step with parameter {0}", "20"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",29)
 testRunner.When(String.Format("execute with parameter {0}", "30"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "When ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",30)
 testRunner.Then(String.Format("executed When step with parameter {0}", "30"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
        End Sub
        
        <NUnit.Framework.TestAttribute(),  _
         NUnit.Framework.DescriptionAttribute("TestLine29ExecuteWithParameterParam2")>  _
        Public Overridable Sub TestLine29ExecuteWithParameterParam2()
            Me.Test(AddressOf Me.TestLine29ExecuteWithParameterParam2Steps, 29)
        End Sub
        
        Private Sub TestLine29ExecuteWithParameterParam2Steps()
            Dim table1 As TechTalk.SpecFlow.Table = New TechTalk.SpecFlow.Table(New String() {"ParamValue"})
            table1.AddRow(New String() {"10"})
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",26)
 testRunner.Given("step with parameters", CType(Nothing,String), table1, "Given ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",30)
 testRunner.Then(String.Format("executed When step with parameter {0}", "20"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
            Dim table2 As TechTalk.SpecFlow.Table = New TechTalk.SpecFlow.Table(New String() {"ParamValue"})
            table2.AddRow(New String() {"20"})
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",26)
 testRunner.Given("step with parameters", CType(Nothing,String), table2, "Given ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutline.feature",30)
 testRunner.Then(String.Format("executed When step with parameter {0}", "30"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
        End Sub
    End Class
End Namespace
'#pragma warning restore
#End Region
