'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by SpecFlow (http://www.specflow.org/).
'     SpecFlow Version:3.0.0.0
'     SpecFlow Generator Version:3.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------
#Region "Designer generated code"
'#pragma warning disable
Imports TechTalk.SpecFlow

Namespace Global.PB.SpecFlowMaster.Examples.VB
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0"),  _
     System.Runtime.CompilerServices.CompilerGeneratedAttribute(),  _
     NUnit.Framework.TestFixtureAttribute(),  _
     NUnit.Framework.DescriptionAttribute("SpecFlowScenarioOutlineWithBackground")>  _
    Partial Public Class SpecFlowScenarioOutlineWithBackgroundFeature
        
        Private testRunner As TechTalk.SpecFlow.ITestRunner
        
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",1)
#End ExternalSource
        
        <NUnit.Framework.OneTimeSetUpAttribute()>  _
        Public Overridable Sub FeatureSetup()
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner
            Dim featureInfo As TechTalk.SpecFlow.FeatureInfo = New TechTalk.SpecFlow.FeatureInfo(New System.Globalization.CultureInfo("en-US"), "SpecFlowScenarioOutlineWithBackground", ""&Global.Microsoft.VisualBasic.ChrW(9)&"Test to check which steps in scenario outline execution are really needed for go"& _ 
                    "od tests", ProgrammingLanguage.VB, CType(Nothing,String()))
            testRunner.OnFeatureStart(featureInfo)
        End Sub
        
        <NUnit.Framework.OneTimeTearDownAttribute()>  _
        Public Overridable Sub FeatureTearDown()
            testRunner.OnFeatureEnd
            testRunner = Nothing
        End Sub
        
        <NUnit.Framework.SetUpAttribute()>  _
        Public Overridable Sub TestInitialize()
        End Sub
        
        <NUnit.Framework.TearDownAttribute()>  _
        Public Overridable Sub ScenarioTearDown()
            testRunner.OnScenarioEnd
        End Sub
        
        Public Overridable Sub ScenarioInitialize(ByVal scenarioInfo As TechTalk.SpecFlow.ScenarioInfo)
            testRunner.OnScenarioInitialize(scenarioInfo)
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs(Of NUnit.Framework.TestContext)(NUnit.Framework.TestContext.CurrentContext)
        End Sub
        
        Public Overridable Sub ScenarioStart()
            testRunner.OnScenarioStart
        End Sub
        
        Public Overridable Sub ScenarioCleanup()
            testRunner.CollectScenarioErrors
        End Sub
        
        Public Overridable Sub FeatureBackground()
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",4)
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",6)
 testRunner.Given("step with parameter 9", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Given ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",7)
 testRunner.And("step with parameter 21", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
        End Sub
        
        <NUnit.Framework.TestAttribute(),  _
         NUnit.Framework.DescriptionAttribute("Test without unnecessary steps"),  _
         NUnit.Framework.TestCaseAttribute("10", "20", "21", Nothing),  _
         NUnit.Framework.TestCaseAttribute("20", "30", "21", Nothing)>  _
        Public Overridable Sub TestWithoutUnnecessarySteps(ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal exampleTags() As String)
            Dim scenarioInfo As TechTalk.SpecFlow.ScenarioInfo = New TechTalk.SpecFlow.ScenarioInfo("Test without unnecessary steps", Nothing, exampleTags)
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",9)
Me.ScenarioInitialize(scenarioInfo)
            Me.ScenarioStart
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",4)
Me.FeatureBackground
#End ExternalSource
            Dim table2 As TechTalk.SpecFlow.Table = New TechTalk.SpecFlow.Table(New String() {"ParamValue"})
            table2.AddRow(New String() {String.Format("{0}", param1)})
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",10)
 testRunner.Given("step with parameters", CType(Nothing,String), table2, "Given ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",13)
 testRunner.When(String.Format("execute with parameter {0}", param2), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "When ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",14)
 testRunner.Then(String.Format("executed Given step with parameter {0}", param1), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",15)
 testRunner.And(String.Format("executed When step with parameter {0}", param2), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",16)
 testRunner.And(String.Format("executed Given step with parameter {0}", param3), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
            Me.ScenarioCleanup
        End Sub
    End Class
    
    <NUnit.Framework.TestFixtureAttribute(),  _
     NUnit.Framework.DescriptionAttribute("SpecFlowScenarioOutlineWithBackground")>  _
    Partial Public Class SpecFlowScenarioOutlineWithBackgroundFeatureMaster
        
        Private testRunner As TechTalk.SpecFlow.ITestRunner
        
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",1)
#End ExternalSource
        
        <NUnit.Framework.OneTimeSetUpAttribute()>  _
        Public Overridable Sub FeatureSetup()
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(Nothing, 0)
            Dim featureInfo As TechTalk.SpecFlow.FeatureInfo = New TechTalk.SpecFlow.FeatureInfo(New System.Globalization.CultureInfo("en-US"), "SpecFlowScenarioOutlineWithBackground", ""&Global.Microsoft.VisualBasic.ChrW(9)&"Test to check which steps in scenario outline execution are really needed for go"& _ 
                    "od tests", ProgrammingLanguage.VB, Nothing)
            testRunner.OnFeatureStart(featureInfo)
        End Sub
        
        <NUnit.Framework.OneTimeTearDownAttribute()>  _
        Public Overridable Sub FeatureTearDown()
            testRunner.OnFeatureEnd
            testRunner = Nothing
        End Sub
        
        <NUnit.Framework.SetUpAttribute()>  _
        Public Overridable Sub TestInitialize()
        End Sub
        
        <NUnit.Framework.TearDownAttribute()>  _
        Public Overridable Sub ScenarioTearDown()
            testRunner.OnScenarioEnd
        End Sub
        
        Public Overridable Sub ScenarioInitialize(ByVal scenarioInfo As TechTalk.SpecFlow.ScenarioInfo)
            testRunner.OnScenarioInitialize(scenarioInfo)
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs(Of NUnit.Framework.TestContext)(NUnit.Framework.TestContext.CurrentContext)
        End Sub
        
        Public Overridable Sub ScenarioStart()
            testRunner.OnScenarioStart
        End Sub
        
        Public Overridable Sub ScenarioCleanup()
            testRunner.CollectScenarioErrors
        End Sub
        
        Public Overridable Sub FeatureBackground()
        End Sub
        
        Public Overridable Sub Test(ByVal steps As System.Action, ByVal lineNumber As Integer)
            Dim noExceptionOccured As Boolean = true
            Try 
                Dim scenarioInfo As TechTalk.SpecFlow.ScenarioInfo = New TechTalk.SpecFlow.ScenarioInfo("SpecFlowScenarioOutlineWithBackground", Nothing)
                testRunner.OnScenarioInitialize(scenarioInfo)
                Me.ScenarioStart
                Dim testExecutionContext As NUnit.Framework.Internal.TestExecutionContext.IsolatedContext = New NUnit.Framework.Internal.TestExecutionContext.IsolatedContext()
                Try 
                    steps
                Finally
                    testExecutionContext.Dispose
                End Try
                Me.ScenarioCleanup
            Catch __exception As System.Exception
                noExceptionOccured = false
            End Try
            If noExceptionOccured Then
                Throw New System.Exception(String.Format("Line {0} is suspicious.", lineNumber))
            End If
        End Sub
        
        <NUnit.Framework.TestAttribute(),  _
         NUnit.Framework.DescriptionAttribute("TestLine06StepWithParameter9")>  _
        Public Overridable Sub TestLine06StepWithParameter9()
            Me.Test(AddressOf Me.TestLine06StepWithParameter9Steps, 6)
        End Sub
        
        Private Sub TestLine06StepWithParameter9Steps()
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",7)
 testRunner.Given("step with parameter 21", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Given ")
            Dim table1 As TechTalk.SpecFlow.Table = New TechTalk.SpecFlow.Table(New String() {"ParamValue"})
            table1.AddRow(New String() {"10"})
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",10)
 testRunner.Given("step with parameters", CType(Nothing,String), table1, "Given ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",13)
 testRunner.When(String.Format("execute with parameter {0}", "20"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "When ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",14)
 testRunner.Then(String.Format("executed Given step with parameter {0}", "10"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",15)
 testRunner.And(String.Format("executed When step with parameter {0}", "20"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",16)
 testRunner.And(String.Format("executed Given step with parameter {0}", "21"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",7)
 testRunner.Given("step with parameter 21", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Given ")
            Dim table2 As TechTalk.SpecFlow.Table = New TechTalk.SpecFlow.Table(New String() {"ParamValue"})
            table2.AddRow(New String() {"20"})
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",10)
 testRunner.Given("step with parameters", CType(Nothing,String), table2, "Given ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",13)
 testRunner.When(String.Format("execute with parameter {0}", "30"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "When ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",14)
 testRunner.Then(String.Format("executed Given step with parameter {0}", "20"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",15)
 testRunner.And(String.Format("executed When step with parameter {0}", "30"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",16)
 testRunner.And(String.Format("executed Given step with parameter {0}", "21"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
        End Sub
        
        <NUnit.Framework.TestAttribute(),  _
         NUnit.Framework.DescriptionAttribute("TestLine07StepWithParameter21")>  _
        Public Overridable Sub TestLine07StepWithParameter21()
            Me.Test(AddressOf Me.TestLine07StepWithParameter21Steps, 7)
        End Sub
        
        Private Sub TestLine07StepWithParameter21Steps()
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",6)
 testRunner.Given("step with parameter 9", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Given ")
            Dim table3 As TechTalk.SpecFlow.Table = New TechTalk.SpecFlow.Table(New String() {"ParamValue"})
            table3.AddRow(New String() {"10"})
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",10)
 testRunner.Given("step with parameters", CType(Nothing,String), table3, "Given ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",13)
 testRunner.When(String.Format("execute with parameter {0}", "20"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "When ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",14)
 testRunner.Then(String.Format("executed Given step with parameter {0}", "10"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",15)
 testRunner.And(String.Format("executed When step with parameter {0}", "20"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",16)
 testRunner.And(String.Format("executed Given step with parameter {0}", "21"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",6)
 testRunner.Given("step with parameter 9", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Given ")
            Dim table4 As TechTalk.SpecFlow.Table = New TechTalk.SpecFlow.Table(New String() {"ParamValue"})
            table4.AddRow(New String() {"20"})
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",10)
 testRunner.Given("step with parameters", CType(Nothing,String), table4, "Given ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",13)
 testRunner.When(String.Format("execute with parameter {0}", "30"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "When ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",14)
 testRunner.Then(String.Format("executed Given step with parameter {0}", "20"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",15)
 testRunner.And(String.Format("executed When step with parameter {0}", "30"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",16)
 testRunner.And(String.Format("executed Given step with parameter {0}", "21"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
        End Sub
        
        <NUnit.Framework.TestAttribute(),  _
         NUnit.Framework.DescriptionAttribute("TestLine10StepWithParameters")>  _
        Public Overridable Sub TestLine10StepWithParameters()
            Me.Test(AddressOf Me.TestLine10StepWithParametersSteps, 10)
        End Sub
        
        Private Sub TestLine10StepWithParametersSteps()
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",6)
 testRunner.Given("step with parameter 9", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Given ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",7)
 testRunner.And("step with parameter 21", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",13)
 testRunner.When(String.Format("execute with parameter {0}", "20"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "When ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",14)
 testRunner.Then(String.Format("executed Given step with parameter {0}", "10"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",15)
 testRunner.And(String.Format("executed When step with parameter {0}", "20"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",16)
 testRunner.And(String.Format("executed Given step with parameter {0}", "21"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",6)
 testRunner.Given("step with parameter 9", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Given ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",7)
 testRunner.And("step with parameter 21", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",13)
 testRunner.When(String.Format("execute with parameter {0}", "30"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "When ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",14)
 testRunner.Then(String.Format("executed Given step with parameter {0}", "20"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",15)
 testRunner.And(String.Format("executed When step with parameter {0}", "30"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",16)
 testRunner.And(String.Format("executed Given step with parameter {0}", "21"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
        End Sub
        
        <NUnit.Framework.TestAttribute(),  _
         NUnit.Framework.DescriptionAttribute("TestLine13ExecuteWithParameterParam2")>  _
        Public Overridable Sub TestLine13ExecuteWithParameterParam2()
            Me.Test(AddressOf Me.TestLine13ExecuteWithParameterParam2Steps, 13)
        End Sub
        
        Private Sub TestLine13ExecuteWithParameterParam2Steps()
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",6)
 testRunner.Given("step with parameter 9", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Given ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",7)
 testRunner.And("step with parameter 21", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
            Dim table5 As TechTalk.SpecFlow.Table = New TechTalk.SpecFlow.Table(New String() {"ParamValue"})
            table5.AddRow(New String() {"10"})
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",10)
 testRunner.Given("step with parameters", CType(Nothing,String), table5, "Given ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",14)
 testRunner.Then(String.Format("executed Given step with parameter {0}", "10"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",15)
 testRunner.And(String.Format("executed When step with parameter {0}", "20"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",16)
 testRunner.And(String.Format("executed Given step with parameter {0}", "21"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",6)
 testRunner.Given("step with parameter 9", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Given ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",7)
 testRunner.And("step with parameter 21", CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
            Dim table6 As TechTalk.SpecFlow.Table = New TechTalk.SpecFlow.Table(New String() {"ParamValue"})
            table6.AddRow(New String() {"20"})
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",10)
 testRunner.Given("step with parameters", CType(Nothing,String), table6, "Given ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",14)
 testRunner.Then(String.Format("executed Given step with parameter {0}", "20"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "Then ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",15)
 testRunner.And(String.Format("executed When step with parameter {0}", "30"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
#ExternalSource("SpecFlowScenarioOutlineWithBackground.feature",16)
 testRunner.And(String.Format("executed Given step with parameter {0}", "21"), CType(Nothing,String), CType(Nothing,TechTalk.SpecFlow.Table), "And ")
#End ExternalSource
        End Sub
    End Class
End Namespace
'#pragma warning restore
#End Region
